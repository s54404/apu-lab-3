> library(neuralnet)
> 
> x <- seq(1, 100, by = 1)  # argumenty
> y <- x ^ 3 - 2 * x # wartosci 
> 
> df <- data.frame(  
+   val = x,  
+   res = y 
+ ) 
> 
> # Skalowanie danych
> maxs <- apply(df, 2, max) 
> mins <- apply(df, 2, min)
> 
> scaled_df <- as.data.frame(scale(df, center = mins, scale = maxs - mins))
> 
> # Trenowanie sieci
> nn <- neuralnet(res ~ val, scaled_df, hidden=c(9,3),linear.output=FALSE, threshold = 0.001)
> 
> plot(nn)
> library(neuralnet)
> 
> x <- seq(1, 100, by = 1)  # argumenty
> y <- x ^ 3 - 2 * x # wartosci 
> 
> df <- data.frame(  
+   val = x,  
+   res = y 
+ ) 
> 
> # Skalowanie danych
> maxs <- apply(df, 2, max) 
> mins <- apply(df, 2, min)
> 
> scaled_df <- as.data.frame(scale(df, center = mins, scale = maxs - mins))
> 
> # Trenowanie sieci
> nn <- neuralnet(res ~ val, scaled_df, hidden=c(9,3),linear.output=FALSE, threshold = 0.001)
> 
> plot(nn)
> 
> # Testowanie sieci
> test_results <- compute(nn, scaled_df[1])
> 
> # Odwrócenie skalowania dla wyników
> unscaled_results <- (test_results$net.result * (max(df$res) - min(df$res))) + min(df$res)
> 
> print(unscaled_results)
             [,1]
  [1,]   5690.203
  [2,]   5728.120
  [3,]   5770.494
  [4,]   5817.993
  [5,]   5871.401
  [6,]   5931.645
  [7,]   5999.817
  [8,]   6077.214
  [9,]   6165.376
 [10,]   6266.140
 [11,]   6381.700
 [12,]   6514.688
 [13,]   6668.264
 [14,]   6846.232
 [15,]   7053.183
 [16,]   7294.666
 [17,]   7577.391
 [18,]   7909.483
 [19,]   8300.768
 [20,]   8763.120
 [21,]   9310.835
 [22,]   9961.045
 [23,]  10734.132
 [24,]  11654.087
 [25,]  12748.749
 [26,]  14049.802
 [27,]  15592.389
 [28,]  17414.177
 [29,]  19553.709
 [30,]  22047.963
 [31,]  24929.146
 [32,]  28220.957
 [33,]  31934.779
 [34,]  36066.459
 [35,]  40594.385
 [36,]  45479.461
 [37,]  50667.289
 [38,]  56092.400
 [39,]  61684.018
 [40,]  67372.522
 [41,]  73095.761
 [42,]  78804.454
 [43,]  84466.230
 [44,]  90068.080
 [45,]  95617.291
 [46,] 101141.008
 [47,] 106684.682
 [48,] 112309.612
 [49,] 118089.775
 [50,] 124108.084
 [51,] 130452.177
 [52,] 137209.865
 [53,] 144464.352
 [54,] 152289.451
 [55,] 160745.026
 [56,] 169873.013
 [57,] 179694.386
 [58,] 190207.435
 [59,] 201387.639
 [60,] 213189.269
 [61,] 225548.670
 [62,] 238388.908
 [63,] 251625.365
 [64,] 265171.699
 [65,] 278945.636
 [66,] 292874.122
 [67,] 306897.516
 [68,] 320972.687
 [69,] 335075.010
 [70,] 349199.377
 [71,] 363360.403
 [72,] 377592.019
 [73,] 391946.619
 [74,] 406493.882
 [75,] 421319.317
 [76,] 436522.509
 [77,] 452214.974
 [78,] 468517.428
 [79,] 485556.243
 [80,] 503458.771
 [81,] 522347.215
 [82,] 542330.731
 [83,] 563495.560
 [84,] 585893.243
 [85,] 609527.337
 [86,] 634339.695
 [87,] 660198.031
 [88,] 686887.298
 [89,] 714107.809
 [90,] 741482.897
 [91,] 768577.842
 [92,] 794929.630
 [93,] 820084.407
 [94,] 843636.945
 [95,] 865265.143
 [96,] 884753.368
 [97,] 902000.984
 [98,] 917016.071
 [99,] 929897.504
[100,] 940810.457
> # Wyswietl wyniki
> plot(df$val, df$res, col = 'red', type = 'l')
> points(df$val,  unscaled_results, col = 'blue')
> 